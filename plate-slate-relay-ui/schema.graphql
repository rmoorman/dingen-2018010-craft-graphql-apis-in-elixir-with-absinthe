schema {
  query: RootQueryType
  mutation: RootMutationType
  subscription: RootSubscriptionType
}

directive @action(mode: ActionMode!) on SUBSCRIPTION | MUTATION | QUERY

directive @put on INLINE_FRAGMENT | FRAGMENT_SPREAD | FIELD

enum ActionMode {
  EXTERNAL
  INTERNAL
}

type AllergyInfo {
  allergen: String
  severity: String
}

"""Category for dishes"""
type Category implements SearchResult {
  description: String

  """The identifier for this category"""
  id: ID
  items(filter: MenuItemFilter, order: SortOrder = ASC): [MenuItem]

  """The name of the category"""
  name: String
}

input CreateMenuItemInput {
  categoryId: ID!
  description: String
  name: String!
  price: Decimal!
}

type Customer implements User {
  email: String
  name: String
  orders: [Order]
}

scalar Date

scalar Decimal

scalar Email

type Employee implements User {
  email: String
  name: String
}

"""An error encountered trying to persist input"""
type InputError {
  key: String!
  message: String!
}

"""A tasty dish for you to enjoy"""
type MenuItem implements SearchResult {
  """Since when it has been on the menu"""
  addedOn: Date
  allergyInfo: [AllergyInfo]
  category: Category

  """A small amount of text trying to describe this tasteful experience"""
  description: String

  """The identifier for this menu item"""
  id: ID

  """The name of the menu item"""
  name: String
  orderHistory(since: Date): OrderHistory

  """The price of the item"""
  price: Decimal
}

"""Filtering options for the menu item list"""
input MenuItemFilter {
  """Added to the menu after this date"""
  addedAfter: Date

  """Added to the menu before this date"""
  addedBefore: Date

  """Matching a category name"""
  category: String

  """Matching a name"""
  name: String

  """Priced above a value"""
  pricedAbove: Decimal

  """Priced below a value"""
  pricedBelow: Decimal

  """Matching a tag"""
  tag: String
}

type MenuItemResult {
  errors: [InputError]
  menuItem: MenuItem
}

type Order {
  customerNumber: Int
  id: ID
  items: [OrderItem]
  state: String
}

type OrderHistory {
  """Gross Revenue"""
  gross: Float!
  orders: [Order]
  quantity: Int!
}

type OrderItem {
  name: String
  quantity: Int
}

input OrderItemInput {
  menuItemId: ID!
  quantity: Int!
}

type OrderResult {
  errors: [InputError]
  order: Order
}

input PlaceOrderInput {
  customerNumber: Int
  items: [OrderItemInput!]!
}

enum Role {
  CUSTOMER
  EMPLOYEE
}

type RootMutationType {
  completeOrder(id: ID!): OrderResult
  createMenuItem(input: CreateMenuItemInput!): MenuItemResult
  login(email: String!, password: String!, role: Role!): Session
  placeOrder(input: PlaceOrderInput!): OrderResult
  readyOrder(id: ID!): OrderResult
  updateMenuItem(id: ID, input: UpdateMenuItemInput!): MenuItemResult
}

type RootQueryType {
  """Email filtering"""
  acceptOnlyValidEmailList(emailList: [Email]!): [Email]

  """The list of available categories"""
  categoryList(
    """The name of the category"""
    name: String
    order: SortOrder = ASC
  ): [Category]
  me: User
  menuItem(id: ID!): MenuItem

  """The list of available items on the menu"""
  menuItems(filter: MenuItemFilter, order: SortOrder = ASC): [MenuItem]
  search(matching: String!): [SearchResult]
}

type RootSubscriptionType {
  newMenuItem: MenuItem
  newOrder: Order
  updateOrder(id: ID!): Order
}

interface SearchResult {
  name: String
}

type Session {
  token: String
  user: User
}

enum SortOrder {
  ASC
  DESC
}

input UpdateMenuItemInput {
  categoryId: ID
  description: String
  name: String
  price: Decimal
}

interface User {
  email: String
  name: String
}

